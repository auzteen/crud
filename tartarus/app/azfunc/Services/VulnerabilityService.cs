using Microsoft.Extensions.Logging;
using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;
using Tartarus.Model.Vulnerability;
using Tartarus.Services.Data;
namespace Tartarus.Services
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly ILogger<IVulnerabilityService> _logger;
        private readonly IDatabaseService _dbservice;

        public VulnerabilityService(ILogger<IVulnerabilityService> log, IDatabaseService dbservice)
        {
            _logger = log;
            _dbservice = dbservice;
        }
        public List<VulernabilityRootData> TransformVulnaribiltyData(JsonResponseDataMachine responseMachines, JsonResponseDataVulnerabilityMachines responseVulnerabilities)
        {
            #region Transformation Work - Machines -> Vulnerability By Machine 
            List<VulernabilityRootData> rootData = new List<VulernabilityRootData>();

            List<TransformVulnerabilityMachineModel> vulnerabilities = new List<TransformVulnerabilityMachineModel>();
            for (int i = 0; i < responseVulnerabilities.Value.Length; i++)
            {
                for (int j = 0; j < responseMachines.Value.Length; j++)
                {
                    if (responseMachines.Value[j].Id == responseVulnerabilities.Value[i].MachineId)
                    {
                        var vulnerabilityData = responseVulnerabilities.Value[i];
                        var machineData = responseMachines.Value[j];
                        var transformData = new TransformVulnerabilityMachineModel()
                        {
                            ID = vulnerabilityData.ID,
                            CVEID = vulnerabilityData.CVEID,
                            MachineId = vulnerabilityData.MachineId,
                            FixingKbId = vulnerabilityData.FixingKbId,
                            ProductName = vulnerabilityData.ProductName,
                            ProductVendor = vulnerabilityData.ProductVendor,
                            ProductVersion = vulnerabilityData.ProductVersion,
                            Severity = vulnerabilityData.Severity,
                            ComputerDNSName = machineData.ComputerDnsName,
                            LastIPaddress = machineData.LastIpAddress
                        };
                        vulnerabilities.Add(transformData);
                    }
                }
            }
            rootData.Add(new VulernabilityRootData
            {
                Data = new List<VulernabilityData> {
                new VulernabilityData {
                 Attributes=vulnerabilities,
                 Type="Vulnerabilities"
                }
                }
            });
            return rootData;
            #endregion
            /*List<VulnerabilityData> vulnerabilities = new List<VulnerabilityData>();
            if (responseData != null)
            {
                foreach (var data in responseData.Value)
                {
                    var vulnerabiltyAttributes = new Vulnerability
                    {
                        AssetName = data.ComputerDnsName,
                        AssetType = "",
                        CompanyShortName = "",
                        Source = "MS Defender",
                        SourceId = data.Id,
                        OS = "",
                        VendorName = "",
                        VendorReference = "",
                        ProductName = "",
                        ProductVersion = "",
                        CVEID = "",
                        IPAddress = "",
                        FQDN = "",
                        Severity = ""
                    };
                    var vulnerabilityData = new VulnerabilityData
                    {
                        Type = "Vulnerabilities",
                        Attributes = vulnerabiltyAttributes
                    };
                    vulnerabilities.Add(vulnerabilityData);
                }
            }
            return vulnerabilities;*/
        }
        public string GetToken()
        {
            string tenantId = Environment.GetEnvironmentVariable("tenantId");
            string appId = Environment.GetEnvironmentVariable("appId");
            string appSecret = Environment.GetEnvironmentVariable("appSecret");
            const string authority = "https://login.microsoftonline.com";
            const string audience = "https://api.securitycenter.microsoft.com";

            IConfidentialClientApplication myApp = ConfidentialClientApplicationBuilder.Create(appId).WithClientSecret(appSecret).WithAuthority($"{authority}/{tenantId}").Build();

            List<string> scopes = new List<string>() { $"{audience}/.default" };

            AuthenticationResult authResult = myApp.AcquireTokenForClient(scopes).ExecuteAsync().GetAwaiter().GetResult();

            return authResult.AccessToken;

        }
    }
}