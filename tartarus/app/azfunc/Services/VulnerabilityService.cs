using Microsoft.Extensions.Logging;
using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;
using Tartarus.Model.Vulnerability;
using Tartarus.Services.Data;
namespace Tartarus.Services
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly ILogger<IVulnerabilityService> _logger;
        private readonly IDatabaseService _dbservice;

        public VulnerabilityService(ILogger<IVulnerabilityService> log, IDatabaseService dbservice)
        {
            _logger = log;
            _dbservice = dbservice;
        }
        public List<VulnerabilityData> TransformVulnaribiltyData(JsonResponseDataMachine responseData)
        {
            List<VulnerabilityData> vulnerabilities = new List<VulnerabilityData>();
            if (responseData != null)
            {
                foreach (var data in responseData.Value)
                {
                    var vulnerabiltyAttributes = new Vulnerability
                    {
                        AssetName = data.ComputerDnsName,
                        AssetType = "",
                        CompanyShortName = "",
                        Source = "MS Defender",
                        SourceId = data.Id,
                        OS = "",
                        VendorName = "",
                        VendorReference = "",
                        ProductName = "",
                        ProductVersion = "",
                        CVEID = "",
                        IPAddress = "",
                        FQDN = "",
                        Severity = ""
                    };
                    var vulnerabilityData = new VulnerabilityData
                    {
                        Type = "Vulnerabilities",
                        Attributes = vulnerabiltyAttributes
                    };
                    vulnerabilities.Add(vulnerabilityData);
                }
            }
            return vulnerabilities;
        }
        public string GetToken()
        {
            string tenantId = Environment.GetEnvironmentVariable("tenantId");
            string appId = Environment.GetEnvironmentVariable("appId");
            string appSecret = Environment.GetEnvironmentVariable("appSecret");
            const string authority = "https://login.microsoftonline.com";
            const string audience = "https://api.securitycenter.microsoft.com";

            IConfidentialClientApplication myApp = ConfidentialClientApplicationBuilder.Create(appId).WithClientSecret(appSecret).WithAuthority($"{authority}/{tenantId}").Build();

            List<string> scopes = new List<string>() { $"{audience}/.default" };

            AuthenticationResult authResult = myApp.AcquireTokenForClient(scopes).ExecuteAsync().GetAwaiter().GetResult();

            return authResult.AccessToken;

        }
    }
}