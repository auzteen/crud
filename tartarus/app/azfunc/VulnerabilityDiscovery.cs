using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Identity.Client;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection.Metadata;
using System.Reflection.PortableExecutable;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Tarta;

namespace Tarta
{
    public class DiscoverVulnerabilities
    {
        private static HttpClient httpClient = new HttpClient();
        private static string GET_URL = "https://api.securitycenter.microsoft.com/api/vulnerabilities/machinesVulnerabilities"; // Change these uri for GET
        private static string POST_URL = "https://fa-cita-sbx-cac-01.azurewebsites.net/v1/customers/open/assets/"; // Change these uri for POST

        [FunctionName("DiscoverVulnerabilities")]
        public static async Task Run(
        [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "v1/vulnerabilities/discover")]
        HttpRequest req, ILogger log)
        {
            //string token = req.Headers["Authorization"];
            //if (token == null)
            //    throw new UnauthorizedAccessException("Unauthorized access");

            //string companyShortName = id;

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", GetToken()); // Add Bearer token to the request.
            var response = await httpClient.GetAsync(GET_URL); // Get Request
            var result = response.Content.ReadAsStringAsync(); // Read content as string 
            log.LogInformation($"C# Timer trigger function executed at:{DateTime.Now}"); //{result.Result}

            var responseData = JsonConvert.DeserializeObject<JsonResponseData>(result.Result); // Convert JSON response to an object

            //POST DATA
            if (responseData != null && responseData.Value?.Length > 0) // Check if the responseData object is not null and the Value lenght is greater than 0 then execute below statement.
            {
                // Setting default casing for JSON data as CamelCase for example convert FirstName to firstName
                DefaultContractResolver contractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy()
                };

                // Serilaize Object using CamelCase Notations.
                var jsonObject = JsonConvert.SerializeObject(ConvertToAssetData(responseData), new JsonSerializerSettings
                {
                    ContractResolver = contractResolver,
                    Formatting = Formatting.Indented
                });
                log.LogInformation($"C# View: {DateTime.Now}{jsonObject}"); // Print to screen

                // Put data
                var httpContent = new StringContent(jsonObject, System.Text.Encoding.UTF8, "application/json"); // Create HttpPost content as type of json and enable UTF-8 Content
                httpContent.Headers.Add("X-Company-Short", "open"); // Add Headers
                var respMessage = await httpClient.PostAsync(POST_URL, httpContent); // POST Request
                var postResp = await respMessage.Content.ReadAsStringAsync(); // Read content as string 
                log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}{postResp}"); // Print to screen
                new ObjectResult(postResp);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                throw new UnauthorizedAccessException("Invalid bearer token for Defender");
            }
            else
                throw new Exception($"Somethings went wrong: {response.StatusCode}");
        }
        public static string GetToken()
        {
            string tenantId = Environment.GetEnvironmentVariable("tenantId");
            string appId = Environment.GetEnvironmentVariable("appId");
            string appSecret = Environment.GetEnvironmentVariable("appSecret");
            const string authority = "https://login.microsoftonline.com";
            const string audience = "https://api.securitycenter.microsoft.com";

            IConfidentialClientApplication myApp = ConfidentialClientApplicationBuilder.Create(appId).WithClientSecret(appSecret).WithAuthority($"{authority}/{tenantId}").Build();
            List<string> scopes = new List<string>() { $"{audience}/.default" };
            AuthenticationResult authResult = myApp.AcquireTokenForClient(scopes).ExecuteAsync().GetAwaiter().GetResult();
            return authResult.AccessToken;
        }

        /// <summary>
        /// Function to convert Response Data recieved from Macines API to Assets Data
        /// </summary>
        /// <param name="responseData"></param>
        /// <returns></returns>
        private static RootData ConvertToAssetData(JsonResponseData responseData)
        {
            RootData rootData = new RootData();
            if (responseData != null)
            {
                List<AssetData> lst = new List<AssetData>();
                List<Asset> assets = new List<Asset>();
                foreach (var data in responseData.Value)
                {
                    assets.Add(new Asset
                    {
                        AssetName = data.ComputerDnsName,
                        AssetType = "",
                        IpAddress = data.LastIpAddress,
                        CompanyShortName = "",
                        Source = "MS Defender",
                        SourceId = data.machineId,
                        OS = data.productVendor,
                        VenderName = data.productVendor,
                        VenderReference = data.fixingKbId,
                        ProductName = data.productName,
                        ProductVersion = data.productVersion,
                        CVEID = data.cveId,
                        IPAddress = data.LastExternalIpAddress,
                        FQDN = "",
                        Severity = data.severity
                        // AssetCriticality = new AssetCriticality
                        // {
                        //     Status = data.RiskScore,
                        // }
                    });
                }
                var assetData = new AssetData
                {
                    AssetType = "Vulnerabilities",
                    //AssetAttributes = new AssetAttributes
                    //{
                        //AssetType = "Asset/Scan Servers",
                        Asset = assets.ToArray()
                    //}
                };

                lst.Add(assetData);
                rootData.AssetData = new AssetData[] { assetData };
            }
            return rootData;
        }
    }
    #region POST Request Data for Assets API
    public class RootData
    {
        [JsonProperty("data")]
        public AssetData[] AssetData { get; set; }
    }
    public class AssetData
    {
        [JsonProperty("type")]
        public string AssetType { get; set; }
        [JsonProperty("attributes")]
        public Asset[] Asset { get; set; }
    }
    public class Asset
    {
        [JsonProperty("asset_name")]
        public string AssetName { get; set; }
        [JsonProperty("asset_type")]
        public string AssetType { get; set; }
        [JsonProperty("ip_address")]
        public string IpAddress { get; set; }
        [JsonProperty("os")]
        public string OS { get; set; }
        [JsonPropertyName("VID")]
        public int VID { get; set; }
        [JsonPropertyName("CompanyShortName")]
        public string CompanyShortName { get; set; }
        [JsonPropertyName("Source")]
        public string Source { get; set; }
        [JsonPropertyName("SourceId")]
        public string SourceId { get; set; }
        [JsonPropertyName("VenderName")]
        public string VenderName { get; set; }
        [JsonPropertyName("VenderReference")]
        public string VenderReference { get; set; }
        [JsonPropertyName("ProductName")]
        public string ProductName { get; set; }
        [JsonPropertyName("ProductVersion")]
        public string ProductVersion { get; set; }
        [JsonPropertyName("CVEID")]
        public string CVEID { get; set; }
        [JsonPropertyName("IPAddress")]
        public string IPAddress { get; set; }
        [JsonPropertyName("FQDN")]
        public string FQDN { get; set; }
        [JsonPropertyName("Severity")]
        public string Severity { get; set; }
    }
    #endregion
    public class JsonResponseData
    {
        public Machine[]? Value { get; set; }
    }
    public class Machine
    {
        public string Id { get; set; }
        public string ComputerDnsName { get; set; }
        public string LastIpAddress { get; set; }
        public string LastExternalIpAddress { get; set; }
        public string RiskScore { get; set; }

        public string cveId { get; set; }
        public string machineId { get; set; }
        public string fixingKbId { get; set; }
        public string productName { get; set; }
        public string productVendor { get; set; }
        public string productVersion { get; set; }
        public string severity { get; set; }
    }

}
